import { AddChannelModeratorRequest, AddChannelModeratorResult, Channel, ClearChannelHistoryRequest, ClearChannelHistoryResult, CreateChannelRequest, CreateChannelResult, DeleteChannelRequest, DeleteChannelResult, ListChannelMembersRequest, RetrieveChannelResult, ListChannelsRequest, ListChannelsResult, CheckChannelUnreadResult, HideChannelRequest, HideChannelResult, InviteUserRequest, InviteUserResult, JoinChannelRequest, JoinChannelResult, LeaveChannelRequest, LeaveChannelResult, MuteChannelRequest, MuteChannelResult, ReadChannelRequest, ReadChannelResult, UnmuteChannelRequest, UnmuteChannelResult, UpdateChannelRequest, UpdateChannelResult, CountUnreadChannelsRequest, CheckChannelUnreadRequest } from './channel';
import { StartChatSessionRequest, StartChatSessionResult } from './chat-session';
import { ChatKittyConfiguration } from './configuration';
import { CurrentUser, RetrieveCurrentUserResult, UpdateCurrentUserDisplayPictureRequest, UpdateCurrentUserDisplayPictureResult, UpdateCurrentUserResult } from './current-user';
import { TriggerEventRequest, TriggerEventResult } from './event';
import { SendKeystrokesRequest } from './keystrokes';
import { DeleteMessageRequest, DeleteMessageResult, EditMessageRequest, EditMessageResult, RetrieveLastReadMessageRequest, RetrieveLastReadMessageResult, RetrieveMessageChannelRequest, RetrieveMessageChannelResult, RetrieveMessageParentRequest, RetrieveMessageParentResult, CountMessageRepliesRequest, ListMessagesRequest, ListMessagesResult, CountUnreadMessagesRequest, ReadMessageRequest, ReadMessageResult, SendMessageRequest, SendMessageResult } from './message';
import { Notification } from './notification';
import { ChatKittyObserver, ChatKittyUnsubscribe } from './observer';
import { ListReactionsRequest, ListReactionsResult, ReactToMessageRequest, ReactToMessageResult, RemoveReactionRequest, RemoveReactionResult } from './reaction';
import { ListReadReceiptsRequest, ListReadReceiptsResult } from './read-receipt';
import { CountResult } from './result';
import { CreateThreadRequest, CreateThreadResult, RetrieveThreadChannelRequest, RetrieveThreadChannelResult, RetrieveThreadMessageRequest, RetrieveThreadMessageResult, ListThreadsRequest, ListThreadsResult, ReadThreadRequest, ReadThreadResult } from './thread';
import { BlockUserRequest, BlockUserResult, CheckUserIsChannelMemberRequest, CheckUserIsChannelMemberResult, RetrieveUserResult, ListUsersRequest, ListUsersResult, User } from './user';
import { DeleteUserBlockedRecordRequest, DeleteUserBlockedRecordResult, ListUserBlockedRecordsResult } from './user-blocked-record';
import { StartSessionRequest, StartSessionResult } from './user-session';
export declare class ChatKitty {
    private readonly configuration;
    private static readonly _instances;
    static getInstance(apiKey: string): ChatKitty;
    private static channelRelay;
    private static userRelay;
    private readonly stompX;
    private readonly currentUserSubject;
    private readonly lostConnectionSubject;
    private readonly resumedConnectionSubject;
    private writeFileGrant?;
    private chatSessions;
    private messageMapper;
    private keyStrokesSubject;
    currentUser?: CurrentUser;
    constructor(configuration: ChatKittyConfiguration);
    startSession(request: StartSessionRequest): Promise<StartSessionResult>;
    endSession(): Promise<void>;
    retrieveCurrentUser(): Promise<RetrieveCurrentUserResult>;
    onCurrentUserChanged(onNextOrObserver: ChatKittyObserver<CurrentUser | null> | ((user: CurrentUser | null) => void)): ChatKittyUnsubscribe;
    onCurrentUserOnline(onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)): ChatKittyUnsubscribe;
    onCurrentUserOffline(onNextOrObserver: ChatKittyObserver<CurrentUser> | (() => void)): ChatKittyUnsubscribe;
    updateCurrentUser(update: (user: CurrentUser) => CurrentUser): Promise<UpdateCurrentUserResult>;
    updateCurrentUserDisplayPicture(request: UpdateCurrentUserDisplayPictureRequest): Promise<UpdateCurrentUserDisplayPictureResult>;
    updateChannel(request: UpdateChannelRequest): Promise<UpdateChannelResult>;
    deleteChannel(request: DeleteChannelRequest): Promise<DeleteChannelResult>;
    createChannel(request: CreateChannelRequest): Promise<CreateChannelResult>;
    listChannels(request?: ListChannelsRequest): Promise<ListChannelsResult>;
    retrieveChannel(id: number): Promise<RetrieveChannelResult>;
    joinChannel(request: JoinChannelRequest): Promise<JoinChannelResult>;
    leaveChannel(request: LeaveChannelRequest): Promise<LeaveChannelResult>;
    addChannelModerator(request: AddChannelModeratorRequest): Promise<AddChannelModeratorResult>;
    countUnreadChannels(request?: CountUnreadChannelsRequest): Promise<CountResult>;
    checkChannelUnread(request: CheckChannelUnreadRequest): Promise<CheckChannelUnreadResult>;
    readChannel(request: ReadChannelRequest): Promise<ReadChannelResult>;
    muteChannel(request: MuteChannelRequest): Promise<MuteChannelResult>;
    unmuteChannel(request: UnmuteChannelRequest): Promise<UnmuteChannelResult>;
    clearChannelHistory(request: ClearChannelHistoryRequest): Promise<ClearChannelHistoryResult>;
    hideChannel(request: HideChannelRequest): Promise<HideChannelResult>;
    startChatSession(request: StartChatSessionRequest): StartChatSessionResult;
    sendMessage(request: SendMessageRequest): Promise<SendMessageResult>;
    listMessages(request: ListMessagesRequest): Promise<ListMessagesResult>;
    countUnreadMessages(request?: CountUnreadMessagesRequest): Promise<CountResult>;
    triggerEvent(request: TriggerEventRequest): Promise<TriggerEventResult>;
    readMessage(request: ReadMessageRequest): Promise<ReadMessageResult>;
    retrieveLastReadMessage(request: RetrieveLastReadMessageRequest): Promise<RetrieveLastReadMessageResult>;
    editMessage(request: EditMessageRequest): Promise<EditMessageResult>;
    countMessageReplies(request: CountMessageRepliesRequest): Promise<CountResult>;
    retrieveMessageChannel(request: RetrieveMessageChannelRequest): Promise<RetrieveMessageChannelResult>;
    retrieveMessageParent(request: RetrieveMessageParentRequest): Promise<RetrieveMessageParentResult>;
    createThread(request: CreateThreadRequest): Promise<CreateThreadResult>;
    listThreads(request: ListThreadsRequest): Promise<ListThreadsResult>;
    listThreadChannel(request: RetrieveThreadChannelRequest): Promise<RetrieveThreadChannelResult>;
    listThreadMessage(request: RetrieveThreadMessageRequest): Promise<RetrieveThreadMessageResult>;
    readThread(request: ReadThreadRequest): Promise<ReadThreadResult>;
    reactToMessage(request: ReactToMessageRequest): Promise<ReactToMessageResult>;
    listReactions(request: ListReactionsRequest): Promise<ListReactionsResult>;
    removeReaction(request: RemoveReactionRequest): Promise<RemoveReactionResult>;
    deleteMessage(request: DeleteMessageRequest): Promise<DeleteMessageResult>;
    sendKeystrokes(request: SendKeystrokesRequest): void;
    onNotificationReceived(onNextOrObserver: ChatKittyObserver<Notification> | ((notification: Notification) => void)): ChatKittyUnsubscribe;
    onChannelJoined(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelHidden(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelUnhidden(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelLeft(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    onChannelUpdated(onNextOrObserver: ChatKittyObserver<Channel> | ((channel: Channel) => void)): ChatKittyUnsubscribe;
    listChannelMembers(request: ListChannelMembersRequest): Promise<ListUsersResult>;
    listReadReceipts(request: ListReadReceiptsRequest): Promise<ListReadReceiptsResult>;
    listUsers(request?: ListUsersRequest): Promise<ListUsersResult>;
    listUsersCount(request?: ListUsersRequest): Promise<CountResult>;
    onUserPresenceChanged(onNextOrObserver: ChatKittyObserver<User> | ((user: User) => void)): ChatKittyUnsubscribe;
    inviteUser(request: InviteUserRequest): Promise<InviteUserResult>;
    onParticipantStartedTyping(onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)): ChatKittyUnsubscribe;
    onParticipantStoppedTyping(onNextOrObserver: ChatKittyObserver<User> | ((participant: User) => void)): ChatKittyUnsubscribe;
    retrieveUser(param: number): Promise<RetrieveUserResult>;
    checkUserIsChannelMember(request: CheckUserIsChannelMemberRequest): Promise<CheckUserIsChannelMemberResult>;
    blockUser(request: BlockUserRequest): Promise<BlockUserResult>;
    listUserBlockedRecords(): Promise<ListUserBlockedRecordsResult>;
    deleteUserBlockedRecord(request: DeleteUserBlockedRecordRequest): Promise<DeleteUserBlockedRecordResult>;
}
export default ChatKitty;
