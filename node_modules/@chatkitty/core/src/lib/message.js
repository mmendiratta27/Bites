"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageNotAReplyError = exports.RetrieveMessageParentSucceededResult = exports.RetrieveMessageChannelSucceededResult = exports.sentFileMessage = exports.sentTextMessage = exports.SentFileMessageResult = exports.SentTextMessageResult = exports.DeleteMessageSucceededResult = exports.EditedMessageSucceededResult = exports.ReadMessageSucceededResult = exports.RetrieveLastReadMessageSucceededResult = exports.ListMessagesSucceededResult = exports.isSystemMessage = exports.isUserMessage = exports.isFileMessage = exports.isTextMessage = void 0;
const error_1 = require("./error");
const result_1 = require("./result");
function isTextMessage(message) {
    return message.body !== undefined;
}
exports.isTextMessage = isTextMessage;
function isFileMessage(message) {
    return message.file !== undefined;
}
exports.isFileMessage = isFileMessage;
function isUserMessage(message) {
    return message.user !== undefined;
}
exports.isUserMessage = isUserMessage;
function isSystemMessage(message) {
    return message.user === undefined;
}
exports.isSystemMessage = isSystemMessage;
class ListMessagesSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(paginator) {
        super();
        this.paginator = paginator;
    }
}
exports.ListMessagesSucceededResult = ListMessagesSucceededResult;
class RetrieveLastReadMessageSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.RetrieveLastReadMessageSucceededResult = RetrieveLastReadMessageSucceededResult;
class ReadMessageSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.ReadMessageSucceededResult = ReadMessageSucceededResult;
class EditedMessageSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.EditedMessageSucceededResult = EditedMessageSucceededResult;
class DeleteMessageSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.DeleteMessageSucceededResult = DeleteMessageSucceededResult;
class SentTextMessageResult extends result_1.ChatKittySucceededResult {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.SentTextMessageResult = SentTextMessageResult;
class SentFileMessageResult extends result_1.ChatKittySucceededResult {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.SentFileMessageResult = SentFileMessageResult;
function sentTextMessage(result) {
    const message = result.message;
    return message !== undefined && message.type === 'TEXT';
}
exports.sentTextMessage = sentTextMessage;
function sentFileMessage(result) {
    const message = result.message;
    return message !== undefined && message.type === 'FILE';
}
exports.sentFileMessage = sentFileMessage;
class RetrieveMessageChannelSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.RetrieveMessageChannelSucceededResult = RetrieveMessageChannelSucceededResult;
class RetrieveMessageParentSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(message) {
        super();
        this.message = message;
    }
}
exports.RetrieveMessageParentSucceededResult = RetrieveMessageParentSucceededResult;
class MessageNotAReplyError extends error_1.ChatKittyError {
    constructor(messageModel) {
        super('MessageNotAReplyError', `Message ${messageModel.id} is not a reply.`);
        this.messageModel = messageModel;
    }
}
exports.MessageNotAReplyError = MessageNotAReplyError;
//# sourceMappingURL=message.js.map