import { ChatKittyError } from './error';
import { Message } from './message';
import { ChatKittyPaginator } from './pagination';
import { ChatKittyFailedResult, ChatKittySucceededResult } from './result';
import { ChatKittyUserReference, User } from './user';
export declare type Channel = DirectChannel | PublicChannel | PrivateChannel;
export interface BaseChannel {
    id: number;
    name: string;
    creator?: User;
    lastReceivedMessage?: Message;
    createdTime: string;
    properties: unknown;
    /** @internal */
    _relays: ChannelRelays;
    /** @internal */
    _topics: ChannelTopics;
    /** @internal */
    _actions: ChannelActions;
    /** @internal */
    _streams: ChannelStreams;
}
export interface GroupChannel extends BaseChannel {
    displayName: string;
}
export declare type DirectChannel = BaseChannel & {
    type: 'DIRECT';
    members: User[];
};
export declare type PublicChannel = GroupChannel & {
    type: 'PUBLIC';
};
export declare type PrivateChannel = GroupChannel & {
    type: 'PRIVATE';
};
declare class ChannelRelays {
    self: string;
    messages: string;
    messagesCount: string;
    lastReceivedMessage: string;
    lastReadMessage: string;
    unread: string;
    members: string;
    threads: string;
    calls: string;
}
declare class ChannelTopics {
    self: string;
    messages: string;
    keystrokes: string;
    typing: string;
    participants: string;
    readReceipts: string;
    reactions: string;
    events: string;
}
declare class ChannelActions {
    message: string;
    keystrokes: string;
    join?: string;
    leave?: string;
    addModerator?: string;
    invite?: string;
    read: string;
    mute: string;
    call: string;
    triggerEvent: string;
    update: string;
    delete: string;
    clearHistory: string;
    hide: string;
    createThread: string;
}
declare class ChannelStreams {
    messages: string;
}
export declare function isDirectChannel(channel: Channel): channel is DirectChannel;
export declare function isPublicChannel(channel: Channel): channel is PublicChannel;
export declare function isPrivateChannel(channel: Channel): channel is PrivateChannel;
export declare type CreateChannelResult = CreatedChannelResult | ChatKittyFailedResult;
export declare type CreateChannelRequest = CreateDirectChannelRequest | CreatePublicChannelRequest | CreatePrivateChannelRequest;
export interface BaseCreateChannelRequest {
    members?: ChatKittyUserReference[];
    properties?: unknown;
}
export interface CreateGroupChannelRequest extends BaseCreateChannelRequest {
    name?: string;
    displayName?: string;
}
export declare type CreateDirectChannelRequest = BaseCreateChannelRequest & {
    type: 'DIRECT';
};
export declare type CreatePublicChannelRequest = CreateGroupChannelRequest & {
    type: 'PUBLIC';
};
export declare type CreatePrivateChannelRequest = CreateGroupChannelRequest & {
    type: 'PRIVATE';
};
export declare class CreatedChannelResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class ListChannelsRequest {
    filter?: ListChannelsFilter;
}
export declare class ListChannelsFilter {
    name?: string;
    joined?: boolean;
    unread?: boolean;
}
export declare class ListUnreadChannelsRequest {
    filter: ListUnreadChannelsFilter;
}
export declare class ListUnreadChannelsFilter {
    type: string;
}
export declare type CountUnreadChannelsRequest = ListUnreadChannelsRequest;
export declare class RetrieveChannelUnreadRequest {
    channel: Channel;
}
export declare type ListChannelsResult = ListChannelsSucceededResult | ChatKittyFailedResult;
export declare class ListChannelsSucceededResult extends ChatKittySucceededResult {
    paginator: ChatKittyPaginator<Channel>;
    constructor(paginator: ChatKittyPaginator<Channel>);
}
export declare type RetrieveChannelResult = RetrieveChannelSucceededResult | ChatKittyFailedResult;
export declare class RetrieveChannelSucceededResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class CheckChannelUnreadRequest {
    channel: Channel;
}
export declare type CheckChannelUnreadResult = CheckChannelUnreadSucceededResult | ChatKittyFailedResult;
export declare class CheckChannelUnreadSucceededResult extends ChatKittySucceededResult {
    unread: boolean;
    constructor(unread: boolean);
}
export declare class JoinChannelRequest {
    channel: Channel;
}
export declare type JoinChannelResult = JoinedChannelResult | ChatKittyFailedResult;
export declare class JoinedChannelResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class ChannelNotPubliclyJoinableError extends ChatKittyError {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class ListChannelMembersRequest {
    channel: Channel;
    filter?: ListChannelMembersFilter;
}
export declare class ListChannelMembersFilter {
    displayName?: string;
}
export declare class AddChannelModeratorRequest {
    channel: Channel;
    user: ChatKittyUserReference;
}
export declare type AddChannelModeratorResult = AddedChannelModeratorResult | ChatKittyFailedResult;
export declare class AddedChannelModeratorResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class CannotAddModeratorToChannelError extends ChatKittyError {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class MuteChannelRequest {
    channel: Channel;
}
export declare type MuteChannelResult = MutedChannelResult | ChatKittyFailedResult;
export declare class MutedChannelResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class UnmuteChannelRequest {
    channel: Channel;
}
export declare type UnmuteChannelResult = UnmutedChannelResult | ChatKittyFailedResult;
export declare class UnmutedChannelResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class LeaveChannelRequest {
    channel: Channel;
}
export declare type LeaveChannelResult = LeftChannelResult | ChatKittyFailedResult;
export declare class LeftChannelResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class NotAChannelMemberError extends ChatKittyError {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class ReadChannelRequest {
    channel: Channel;
}
export declare type ReadChannelResult = ReadChannelSucceededResult | ChatKittyFailedResult;
export declare class ReadChannelSucceededResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class ClearChannelHistoryRequest {
    channel: Channel;
}
export declare type ClearChannelHistoryResult = ClearChannelHistorySucceededResult | ChatKittyFailedResult;
export declare class ClearChannelHistorySucceededResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class HideChannelRequest {
    channel: DirectChannel;
}
export declare type HideChannelResult = HideChannelSucceededResult | ChatKittyFailedResult;
export declare class HideChannelSucceededResult extends ChatKittySucceededResult {
    channel: DirectChannel;
    constructor(channel: DirectChannel);
}
export declare class InviteUserRequest {
    channel: Channel;
    user: ChatKittyUserReference;
}
export declare type InviteUserResult = InvitedUserResult | ChatKittyFailedResult;
export declare class InvitedUserResult extends ChatKittySucceededResult {
    user: User;
    constructor(user: User);
}
export declare class ChannelNotInvitableError extends ChatKittyError {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class UpdateChannelRequest {
    channel: Channel;
}
export declare type UpdateChannelResult = UpdatedChannelResult | ChatKittyFailedResult;
export declare class UpdatedChannelResult extends ChatKittySucceededResult {
    channel: Channel;
    constructor(channel: Channel);
}
export declare class DeleteChannelRequest {
    channel: Channel;
}
export declare type DeleteChannelResult = DeletedChannelResult | ChatKittyFailedResult;
export declare class DeletedChannelResult extends ChatKittySucceededResult {
    constructor();
}
export {};
