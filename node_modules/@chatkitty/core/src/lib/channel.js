"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeletedChannelResult = exports.UpdatedChannelResult = exports.ChannelNotInvitableError = exports.InvitedUserResult = exports.HideChannelSucceededResult = exports.ClearChannelHistorySucceededResult = exports.ReadChannelSucceededResult = exports.NotAChannelMemberError = exports.LeftChannelResult = exports.UnmutedChannelResult = exports.MutedChannelResult = exports.CannotAddModeratorToChannelError = exports.AddedChannelModeratorResult = exports.ChannelNotPubliclyJoinableError = exports.JoinedChannelResult = exports.CheckChannelUnreadSucceededResult = exports.RetrieveChannelSucceededResult = exports.ListChannelsSucceededResult = exports.CreatedChannelResult = exports.isPrivateChannel = exports.isPublicChannel = exports.isDirectChannel = void 0;
const error_1 = require("./error");
const result_1 = require("./result");
function isDirectChannel(channel) {
    return channel.type === 'DIRECT';
}
exports.isDirectChannel = isDirectChannel;
function isPublicChannel(channel) {
    return channel.type === 'PUBLIC';
}
exports.isPublicChannel = isPublicChannel;
function isPrivateChannel(channel) {
    return channel.type === 'PRIVATE';
}
exports.isPrivateChannel = isPrivateChannel;
class CreatedChannelResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.CreatedChannelResult = CreatedChannelResult;
class ListChannelsSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(paginator) {
        super();
        this.paginator = paginator;
    }
}
exports.ListChannelsSucceededResult = ListChannelsSucceededResult;
class RetrieveChannelSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.RetrieveChannelSucceededResult = RetrieveChannelSucceededResult;
class CheckChannelUnreadSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(unread) {
        super();
        this.unread = unread;
    }
}
exports.CheckChannelUnreadSucceededResult = CheckChannelUnreadSucceededResult;
class JoinedChannelResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.JoinedChannelResult = JoinedChannelResult;
class ChannelNotPubliclyJoinableError extends error_1.ChatKittyError {
    constructor(channel) {
        super('ChannelNotPubliclyJoinableError', `The channel ${channel.name} can't be joined without an invite.`);
        this.channel = channel;
    }
}
exports.ChannelNotPubliclyJoinableError = ChannelNotPubliclyJoinableError;
class AddedChannelModeratorResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.AddedChannelModeratorResult = AddedChannelModeratorResult;
class CannotAddModeratorToChannelError extends error_1.ChatKittyError {
    constructor(channel) {
        super('CannotAddModeratorToChannel', `The channel ${channel.name} is not a group channel and cannot have moderators.`);
        this.channel = channel;
    }
}
exports.CannotAddModeratorToChannelError = CannotAddModeratorToChannelError;
class MutedChannelResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.MutedChannelResult = MutedChannelResult;
class UnmutedChannelResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.UnmutedChannelResult = UnmutedChannelResult;
class LeftChannelResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.LeftChannelResult = LeftChannelResult;
class NotAChannelMemberError extends error_1.ChatKittyError {
    constructor(channel) {
        super('NotAChannelMemberError', `You are not a member of channel ${channel.name}.`);
        this.channel = channel;
    }
}
exports.NotAChannelMemberError = NotAChannelMemberError;
class ReadChannelSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.ReadChannelSucceededResult = ReadChannelSucceededResult;
class ClearChannelHistorySucceededResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.ClearChannelHistorySucceededResult = ClearChannelHistorySucceededResult;
class HideChannelSucceededResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.HideChannelSucceededResult = HideChannelSucceededResult;
class InvitedUserResult extends result_1.ChatKittySucceededResult {
    constructor(user) {
        super();
        this.user = user;
    }
}
exports.InvitedUserResult = InvitedUserResult;
class ChannelNotInvitableError extends error_1.ChatKittyError {
    constructor(channel) {
        super('ChannelNotInvitableError', `The channel ${channel.name} does not accept invites.`);
        this.channel = channel;
    }
}
exports.ChannelNotInvitableError = ChannelNotInvitableError;
class UpdatedChannelResult extends result_1.ChatKittySucceededResult {
    constructor(channel) {
        super();
        this.channel = channel;
    }
}
exports.UpdatedChannelResult = UpdatedChannelResult;
class DeletedChannelResult extends result_1.ChatKittySucceededResult {
    constructor() {
        super();
    }
}
exports.DeletedChannelResult = DeletedChannelResult;
//# sourceMappingURL=channel.js.map